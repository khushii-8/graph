class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> dst(n, vector<int>(m));
        // Queue stores {x, y}
        queue<pair<int, int>> q;

        // 1. Initialize queue with all '0' cells
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (mat[i][j] == 0) {
                    q.push({i, j});
                    dst[i][j] = 0;
                } else {
                    // Mark '1's as unvisited
                    dst[i][j] = -1; 
                }
            }
        }

        int dx[] = {1, -1, 0, 0};
        int dy[] = {0, 0, 1, -1};

        // 2. BFS traversal
        while (!q.empty()) {
            pair<int, int> cur = q.front();
            q.pop();
            int x = cur.first;
            int y = cur.second;
            int d = dst[x][y];

            for (int k = 0; k < 4; ++k) {
                int nx = x + dx[k];
                int ny = y + dy[k];

                // Check boundaries and if unvisited
                if (nx >= 0 && nx < n && ny >= 0 && ny < m && dst[nx][ny] == -1) {
                    dst[nx][ny] = d + 1;
                    q.push({nx, ny});
                }
            }
        }

        return dst;
    }
};
